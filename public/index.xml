<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Logos, Thumos &amp; Code</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Home on Logos, Thumos &amp; Code</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; 2025 - Jose A. Garcia</copyright>
    <lastBuildDate>Mon, 26 May 2025 18:53:21 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leader election using Raft</title>
      <link>http://localhost:1313/posts/leader_election/</link>
      <pubDate>Mon, 26 May 2025 18:53:21 +0200</pubDate>
      <guid>http://localhost:1313/posts/leader_election/</guid>
      <description>&lt;p&gt;In my previous posts I&amp;rsquo;ve been working on a basic key-value store,&#xA;using a write-ahead log, and replicating its data across several&#xA;replicas (see posts on &lt;a href=&#34;http://localhost:1313/posts/wal/&#34;&gt;WAL&lt;/a&gt;, and &lt;a href=&#34;http://localhost:1313/posts/replication/&#34;&gt;replication&lt;/a&gt;)). This version had a hardcoded leader handling&#xA;all writes, and sending the data to the followers, but had several&#xA;shortcomings, the main one among them was that the configuration had&#xA;to include which node is the leader. If the leader dies, the cluster&#xA;can&amp;rsquo;t do any work, doesn&amp;rsquo;t matter how many nodes remain.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adding replication to the Key-Value Store</title>
      <link>http://localhost:1313/posts/replication/</link>
      <pubDate>Fri, 18 Apr 2025 19:43:07 +0200</pubDate>
      <guid>http://localhost:1313/posts/replication/</guid>
      <description>&lt;p&gt;During the past few weeks I&amp;rsquo;ve built a basic key-value store that&#xA;persists data to disk. It works, but only as a single node, so there&#xA;is a fixed limit on the amount of data it can store, and the througput&#xA;it can sustain.&lt;/p&gt;&#xA;&lt;p&gt;We can make the store scale horizontally in two ways:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Replication&lt;/strong&gt;, which keeps additional copies of the data in other nodes, improving&#xA;throughput.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Sharding&lt;/strong&gt;, which partitions the keys across different nodes, so that we can store more data.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In this post I&amp;rsquo;m going to tackle the first one, replication,&#xA;refactoring the storage layer so that we can have as many replicas as&#xA;we want serving reads. All the code is available in&#xA;&lt;a href=&#34;https://github.com/jagg/ocledis&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes on Eio</title>
      <link>http://localhost:1313/posts/eio/</link>
      <pubDate>Sat, 05 Apr 2025 10:01:15 +0200</pubDate>
      <guid>http://localhost:1313/posts/eio/</guid>
      <description>&lt;p&gt;This weekend I took a step back from working on my Key-Value store to&#xA;make sure I understand the concurrency model of Eio, the OCaml 5&#xA;library that I&amp;rsquo;m using for concurrency and parallelism.&lt;/p&gt;&#xA;&lt;p&gt;I decided to turn my notes into a post to force myself to address any&#xA;gaps in my understanding. I&amp;rsquo;m sure that there are several errors, or&#xA;things to improve, so if you are reading this and find some, please,&#xA;ping me on &lt;a href=&#34;https://x.com/jagarciagim&#34;&gt;Twitter&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    <item>
      <title>A basic Write Ahead Log</title>
      <link>http://localhost:1313/posts/wal/</link>
      <pubDate>Sun, 30 Mar 2025 12:05:49 +0200</pubDate>
      <guid>http://localhost:1313/posts/wal/</guid>
      <description>&lt;p&gt;This weekend I decided to add some basic persistence to my &lt;a href=&#34;https://github.com/jagg/ocledis&#34;&gt;Key-Value&#xA;store&lt;/a&gt;. I considered going directly&#xA;into B-Trees or LSM, but they are quite involved. Moving, forward I&#xA;want to focus more on the distributed side of the store rather than low&#xA;level storage details (saving those for later!), so for now I decided&#xA;to implement something simpler, a basic Write Ahead Log (WAL, for short).&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-write-ahead-log&#34;&gt;What is a Write Ahead Log?&lt;/h2&gt;&#xA;&lt;p&gt;This&#xA;&lt;a href=&#34;https://www.architecture-weekly.com/p/the-write-ahead-log-a-foundation&#34;&gt;post&lt;/a&gt;&#xA;from Oskar Dudycz does a much better job than I could explaining the&#xA;theory, so I will just give the high level summary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Giving OCaml a try</title>
      <link>http://localhost:1313/posts/trying_ocaml/</link>
      <pubDate>Sat, 22 Mar 2025 20:31:47 +0100</pubDate>
      <guid>http://localhost:1313/posts/trying_ocaml/</guid>
      <description>&lt;p&gt;During the last couple of weeks I&amp;rsquo;ve gone on a completely different&#xA;direction. I happened to hear a few people saying good things about OCaml,&#xA;and I was kind of missing coding with strong types, so I decided to&#xA;reimplement my basic key value store (see the &lt;a href=&#34;http://localhost:1313/posts/cledis/&#34;&gt;post&lt;/a&gt;),&#xA;and see if it was fun to write.&lt;/p&gt;&#xA;&lt;p&gt;First of all, here is the&#xA;&lt;a href=&#34;https://github.com/jagg/ocledis&#34;&gt;result&lt;/a&gt;. The functionality is the&#xA;same, a hash map over a network, using an &amp;ldquo;official&amp;rdquo; async library,&#xA;and a basic client and server that receive and send S-Expressions over&#xA;the wire.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Zig from Common Lisp</title>
      <link>http://localhost:1313/posts/lisp_zig/</link>
      <pubDate>Sat, 08 Mar 2025 20:38:02 +0100</pubDate>
      <guid>http://localhost:1313/posts/lisp_zig/</guid>
      <description>&lt;p&gt;&lt;strong&gt;2025-03-12 Update, as people on &lt;a href=&#34;https://x.com/AndrewKraevskii/status/1898539402638283131&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://lobste.rs/s/uaw2fo/using_zig_from_common_lisp&#34;&gt;Lobsters&lt;/a&gt;, and &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/1j6qyo9/calling_zig_from_common_lisp/&#34;&gt;Reddit&lt;/a&gt; pointed out, I was missing a &lt;code&gt;extern&lt;/code&gt; in the struct, see the last section!&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Last week I started playing with my own toy key-value store (see the&#xA;previous &lt;a href=&#34;http://localhost:1313/posts/cledis/&#34;&gt;post&lt;/a&gt;). At the end I got to a&#xA;hashtable exposed over the network, using a protocol based on&#xA;S-Expressions. For the next steps, I have two alternatives, I can work&#xA;on the low level representation of the data, maybe implement B-Trees,&#xA;and some storage, or I can go up instead, and see how can I make it&#xA;distributed, and play with some nice algorithms.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redis from scratch, or Cledis</title>
      <link>http://localhost:1313/posts/cledis/</link>
      <pubDate>Sun, 02 Mar 2025 12:46:38 +0100</pubDate>
      <guid>http://localhost:1313/posts/cledis/</guid>
      <description>&lt;p&gt;This week I was looking for something new, and I realised that I&amp;rsquo;ve&#xA;never tried to do any network programming using Common Lisp. Also,&#xA;some time ago I came across the &lt;a href=&#34;https://build-your-own.org/redis/#table-of-contents&#34;&gt;Build your own&#xA;Redis&lt;/a&gt; book, but&#xA;never tried to go through it. The project is perfect, it contains&#xA;threading, networking, and even some async programming. I had no idea&#xA;what the Common Lisp ecosystem for those things looks like, so it was&#xA;time to find out.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Base64 Encoding &amp; Decoding</title>
      <link>http://localhost:1313/posts/base64/</link>
      <pubDate>Sat, 22 Feb 2025 18:23:44 +0100</pubDate>
      <guid>http://localhost:1313/posts/base64/</guid>
      <description>&lt;p&gt;Looking for a first project to play with, I remembered&#xA;&lt;a href=&#34;https://cryptopals.com&#34;&gt;CryptoPals&lt;/a&gt;. I did some of it several years&#xA;ago, and it was fun, so I thought it could be a good way to get&#xA;familiar with Common Lisp, at least the first set. With that in mind,&#xA;I had a look, and hear we are!&lt;/p&gt;&#xA;&lt;p&gt;The very first challenge is about hex and base64 encoding. The first&#xA;time around I just used available libraries for both (I used Rust at&#xA;the time), but the point of this was to open some black boxes, so I&#xA;decided to implement everything from scratch!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Back to basics</title>
      <link>http://localhost:1313/posts/back-to-basics/</link>
      <pubDate>Sat, 22 Feb 2025 09:50:03 +0100</pubDate>
      <guid>http://localhost:1313/posts/back-to-basics/</guid>
      <description>&lt;p&gt;During the past few years my work as a software engineer has involved&#xA;less low level, algorithmic coding, and more high level strategy,&#xA;architecture, dependency and team interactions. While that makes sense&#xA;as careen progresion (I have more impact that way), the truth is that&#xA;I miss coding things from scratch.&lt;/p&gt;&#xA;&lt;p&gt;Also, with the coming of our AI overlords, I keep on hearing that&#xA;these skills, that I&amp;rsquo;ve spent years improving, are going to, if not&#xA;disappear, become less relevant. In the not so far future, we will be&#xA;able to pay a fee to one of the remaining AI providers, and ask an&#xA;agent to generate our app, and set up a new business from scratch. In&#xA;that world nobody will need to look at code anymore!&lt;/p&gt;</description>
    </item>
    <item>
      <title>CSS Grid Layout Fundamentals</title>
      <link>http://localhost:1313/posts/css-test/</link>
      <pubDate>Sat, 20 Jan 2024 14:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/css-test/</guid>
      <description>&lt;p&gt;CSS Grid is a powerful layout system that allows you to create complex layouts with ease. Here&amp;rsquo;s a quick example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;grid&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;grid-template-columns&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;repeat&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;fr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;grid-gap&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;max-width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1200&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;auto&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a three-column grid with equal width columns and 20px gaps between them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Workflow: Feature Branches and Clean History</title>
      <link>http://localhost:1313/posts/post-3/</link>
      <pubDate>Wed, 15 Mar 2023 11:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/post-3/</guid>
      <description>&lt;p&gt;A clean Git history is essential for maintainable projects. Here&amp;rsquo;s my approach to feature branches and keeping commits organized.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript Async/Await vs Promises</title>
      <link>http://localhost:1313/posts/post-2/</link>
      <pubDate>Wed, 15 Feb 2023 10:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/post-2/</guid>
      <description>&lt;p&gt;While both async/await and Promises handle asynchronous operations in JavaScript, they offer different approaches to writing and reading async code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python List Comprehensions: Beyond the Basics</title>
      <link>http://localhost:1313/posts/post-1/</link>
      <pubDate>Sun, 15 Jan 2023 09:00:00 -0700</pubDate>
      <guid>http://localhost:1313/posts/post-1/</guid>
      <description>&lt;p&gt;List comprehensions are one of Python&amp;rsquo;s most elegant features, but there&amp;rsquo;s more to them than the basic syntax most developers know.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
