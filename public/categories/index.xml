
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Categories on Logos, Thumos &amp; Code</title>
   <link>http://localhost:1313/categories/</link>
   <description>Recent content in Categories on Logos, Thumos &amp; Code</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <copyright>Copyright &amp;copy; 2025 - Jose A. Garcia</copyright>
   <lastBuildDate>Sat, 22 Mar 2025 20:31:47 +0100</lastBuildDate>
   
       <atom:link href="http://localhost:1313/categories/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Giving OCaml a try</title>
       <link>http://localhost:1313/posts/trying_ocaml/</link>
       <pubDate>Sat, 22 Mar 2025 20:31:47 +0100</pubDate>
       
       <guid>http://localhost:1313/posts/trying_ocaml/</guid>
       <description>&lt;p&gt;During the last couple of weeks I&amp;rsquo;ve gone on a completely differentdirection. I happened to hear a few people saying good things about OCaml,and I was kind of missing coding with strong types, so I decided toreimplement my basic key value store (see the &lt;a href=&#34;http://localhost:1313/posts/cledis/&#34;&gt;post&lt;/a&gt;),and see if it was fun to write.&lt;/p&gt;&lt;p&gt;First of all, here is the&lt;a href=&#34;https://github.com/jagg/ocledis&#34;&gt;result&lt;/a&gt;. The functionality is thesame, a hash map over a network, using an &amp;ldquo;official&amp;rdquo; async library,and a basic client and server that receive and send S-Expressions overthe wire.&lt;/p&gt;&lt;h4 id=&#34;what-did-i-like&#34;&gt;What did I like?&lt;/h4&gt;&lt;h5 id=&#34;the-libraries-i-found-were-pretty-nice&#34;&gt;The libraries I found were pretty nice!&lt;/h5&gt;&lt;p&gt;For async and networking I picked&lt;a href=&#34;https://github.com/ocaml-multicore/eio&#34;&gt;Eio&lt;/a&gt;, which is fairly modern,and based on io_uring. For Common Lisp I used&lt;a href=&#34;https://github.com/orthecreedence/cl-async&#34;&gt;cl-async&lt;/a&gt;, which workedvery well, but it seems it hasn&amp;rsquo;t had much activity since 2015.&lt;/p&gt;&lt;p&gt;Also, it turns out that OCaml has&lt;a href=&#34;https://ocaml.org/docs/metaprogramming&#34;&gt;preprocessors&lt;/a&gt; able togenerate code. It seems that they have access to the Abstract SyntaxTree of the sources, so they sound like something similar to CommonLisp macros. I used it to autogenerate the code to transform my typesto S-Expressions, and it was really convenient!&lt;/p&gt;&lt;h5 id=&#34;the-build-system-and-tooling-just-works&#34;&gt;The build system and tooling just works&lt;/h5&gt;&lt;p&gt;Installing the environment through Opam was painless, and setting aproject through Dune was very intuitive. Slightly easier than CommonLisp&amp;rsquo;s ASDF, and massively better than CMake!&lt;/p&gt;&lt;h5 id=&#34;the-type-system-was-brilliant&#34;&gt;The type system was brilliant&lt;/h5&gt;&lt;p&gt;I generally prefer strongly typed languages, and OCaml didn&amp;rsquo;tdisappoint. The type inference allowed me iterate on my changeswithout having to go all over the place updating type signatures. OnceI&amp;rsquo;m happy with a module&amp;rsquo;s API, I can properly define it in aninterface.&lt;/p&gt;&lt;p&gt;The types really helped me reason about he code, and forced me tospecify corner cases I may have ignored otherwise. As a result thecode is cleaner this time.&lt;/p&gt;&lt;h4 id=&#34;what-did-i-miss&#34;&gt;What did I miss?&lt;/h4&gt;&lt;h5 id=&#34;interactive-coding&#34;&gt;Interactive coding&lt;/h5&gt;&lt;p&gt;OCaml has its own REPL, UTop. It works well, and has Dune integration,so it will find all the sources for the project. Sadly I couldn&amp;rsquo;t makeit work from Emacs. I did try it a bit from the console, but since itwas a bit more out of the way I didn&amp;rsquo;t use it that much.&lt;/p&gt;&lt;p&gt;I missed the real time conversation between Sly/Slime and my code, andbeing able to test my functions immediately after writing them. I willhave to investigate a bit more!&lt;/p&gt;&lt;h5 id=&#34;structured-editing&#34;&gt;Structured editing&lt;/h5&gt;&lt;p&gt;Editing S-Expressions through paredit is quite a niceexperience. Being able to move around the code, change the scope ofthe expresions, and move parens around is very convenient, and it&amp;rsquo;s abit sad going back to do all those changes by hand.&lt;/p&gt;&lt;h4 id=&#34;and-what-about-the-code&#34;&gt;And what about the code?&lt;/h4&gt;&lt;p&gt;Well, I&amp;rsquo;m not even half way through &lt;a href=&#34;https://dev.realworldocaml.org/toc.html&#34;&gt;Real WorldOCaml&lt;/a&gt;, so I barely know whatI&amp;rsquo;m doing, but this is what I came up with.&lt;/p&gt;&lt;h5 id=&#34;the-store&#34;&gt;The Store&lt;/h5&gt;&lt;p&gt;In the same way I did for the Common Lisp version, the store is just ahash table. In Cledis I had to use locks to ensure two differentthreads don&amp;rsquo;t try to update it at the same time, but in Eio I was ableto handle the communication through a Stream. I have a single handlerprocessing the queries from a single Fiber, so all the access is safeand serialized.&lt;/p&gt;&lt;p&gt;It approaches an actor model, so adding things like sharding should befairly intuitive. More things to investigate!&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Base&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Eio.&lt;span style=&#34;color:#a6e22e&#34;&gt;Std&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;v command &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;v&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;v option Promise.u&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;v t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&lt;/span&gt;v command Eio.Stream.t&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; make sw &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; stream &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Eio.Stream.create 120 &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Hashtbl.create &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rec&lt;/span&gt; handler () &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; Eio.Stream.take stream &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Hashtbl.add table &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       handler ()&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; resolver&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Hashtbl.find table key &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       Promise.resolve resolver &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       handler ()&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Fiber.fork &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;sw handler&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  stream&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; set store key &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Eio.Stream.add store &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; get store key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; promise&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; resolver  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Promise.create () &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Eio.Stream.add store &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; resolver&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Promise.await promise&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;the-protocol&#34;&gt;The protocol&lt;/h5&gt;&lt;p&gt;This is pretty much equivalent to the old version, but now we haveclearly defined types for commands and responses:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Num&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; int32&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[@@&lt;/span&gt;deriving sexp&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; command &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[@@&lt;/span&gt;deriving sexp&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;All_ok&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[@@&lt;/span&gt;deriving sexp&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And a couple of functions to send and receive lists of them over thewire:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; get_sexp_list of_sexp reader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bytes.of_string &lt;span style=&#34;color:#f92672&#34;&gt;@@&lt;/span&gt; Eio.Buf_read.take 4 reader &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Int.of_int32_exn &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Stdlib.Bytes.get_int32_be len 0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Eio.Buf_read.take len reader &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sexp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Parsexp.Single.parse_string_exn msg &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  of_sexp sexp&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; send_sexp_list of_sexp objs writer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sexp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; of_sexp objs &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; sexp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sexplib.Sexp.to_string sexp &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; String.length sexp &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; buffer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bytes.create &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;len &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 4&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;(** Not sure if there is a way to write into the socket without allocating buffers *)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Encoding.push_str_exn 0 buffer sexp &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Eio.Buf_write.bytes writer buffer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the specialized versions:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; get_responses reader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get_sexp_list &lt;span style=&#34;color:#f92672&#34;&gt;[%&lt;/span&gt;of_sexp&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; response &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; reader&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; send_responses responses writer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  send_sexp_list &lt;span style=&#34;color:#f92672&#34;&gt;[%&lt;/span&gt;sexp_of&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; response &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; responses writer &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; get_commands reader &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get_sexp_list &lt;span style=&#34;color:#f92672&#34;&gt;[%&lt;/span&gt;of_sexp&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; command &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  reader&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; send_commands commands writer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  send_sexp_list &lt;span style=&#34;color:#f92672&#34;&gt;[%&lt;/span&gt;sexp_of&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; command &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; commands writer&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;the-server--client&#34;&gt;The Server &amp;amp; Client&lt;/h5&gt;&lt;p&gt;And here we just use Eio to make client and server talk.&lt;/p&gt;&lt;p&gt;The server:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; handle_client store flow &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt;addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  traceln &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SERVER] Got a connection&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Kvlib.&lt;span style=&#34;color:#a6e22e&#34;&gt;Protocol&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; from_client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Eio.Buf_read.of_flow flow &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;max_size&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;4096 &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Eio.Buf_write.with_flow flow &lt;span style=&#34;color:#f92672&#34;&gt;@@&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; to_client &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_commands from_client &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; query_str &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sexplib.Sexp.to_string_hum &lt;span style=&#34;color:#f92672&#34;&gt;([%&lt;/span&gt;sexp_of&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; command &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; query&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  traceln &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SERVER] Query: %s&amp;#34;&lt;/span&gt; query_str&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; List.map &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;f&lt;span style=&#34;color:#f92672&#34;&gt;:(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; cmd &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; run_command store cmd&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; query &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                  send_responses response to_client&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; run_server socket store &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Eio.Net.run_server socket &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;handle_client store&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;on_error&lt;span style=&#34;color:#f92672&#34;&gt;:(&lt;/span&gt;traceln &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error found: %a&amp;#34;&lt;/span&gt; Fmt.exn&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; server &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;net &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Switch.run &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;name&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;@@&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; sw &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; store &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Store.make sw &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               traceln &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Store ready&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Eio.Net.listen net &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;sw &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;reuse_addr&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;true &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;backlog&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;5 addr &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               traceln &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Server ready.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               Fiber.fork &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;sw &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; run_server socket store&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And finally, the client:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; run_client &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;net &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Switch.run &lt;span style=&#34;color:#f92672&#34;&gt;@@&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; sw &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; flow &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Eio.Net.connect &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;sw net addr &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;open&lt;/span&gt; Kvlib.&lt;span style=&#34;color:#a6e22e&#34;&gt;Protocol&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; from_server &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Eio.Buf_read.of_flow flow &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;max_size&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;4096 &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Eio.Buf_write.with_flow flow &lt;span style=&#34;color:#f92672&#34;&gt;@@&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; to_server &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; query &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Num&lt;/span&gt; 2l&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                send_commands query to_server&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_responses from_server &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Sexplib.Sexp.to_string_hum &lt;span style=&#34;color:#f92672&#34;&gt;([%&lt;/span&gt;sexp_of&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; response &lt;span style=&#34;color:#66d9ef&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; response&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                traceln &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[CLIENT] Response: %s&amp;#34;&lt;/span&gt; response&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                                &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;net &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Switch.run &lt;span style=&#34;color:#f92672&#34;&gt;@@&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                traceln &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[CLIENT]: Starting&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                run_client &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;net &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;addr&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Eio_main.run &lt;span style=&#34;color:#f92672&#34;&gt;@@&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; env &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  client &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;net&lt;span style=&#34;color:#f92672&#34;&gt;:(&lt;/span&gt;Eio.Stdenv.net env&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;addr&lt;span style=&#34;color:#f92672&#34;&gt;:(`&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Tcp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Eio.Net.Ipaddr.V4.loopback&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 12342&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;&lt;p&gt;I still have a lot to learn about OCaml, but I was able to get aworking server on just a few hours, and the experience was quiteenjoyable. Also, having the type checker covering my back was nice.&lt;/p&gt;&lt;p&gt;I have to admit that I came a bit worried about functional programmingmaking the day to day coding too constraining, but, maybe because Idon&amp;rsquo;t know enough to make my life difficult, I felt fairlyproductive. A lot of the above code relies on mutation, and maybethere are more functional ways to do it, but I didn&amp;rsquo;t feel that I wasfighting the language to get here, which is a win in my mind.&lt;/p&gt;&lt;p&gt;There are still many things to learn, so I think I will continueplaying with Ocaml a bit longer!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Using Zig from Common Lisp</title>
       <link>http://localhost:1313/posts/lisp_zig/</link>
       <pubDate>Sat, 08 Mar 2025 20:38:02 +0100</pubDate>
       
       <guid>http://localhost:1313/posts/lisp_zig/</guid>
       <description>&lt;p&gt;&lt;strong&gt;2025-03-12 Update, as people on &lt;a href=&#34;https://x.com/AndrewKraevskii/status/1898539402638283131&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://lobste.rs/s/uaw2fo/using_zig_from_common_lisp&#34;&gt;Lobsters&lt;/a&gt;, and &lt;a href=&#34;https://www.reddit.com/r/lisp/comments/1j6qyo9/calling_zig_from_common_lisp/&#34;&gt;Reddit&lt;/a&gt; pointed out, I was missing a &lt;code&gt;extern&lt;/code&gt; in the struct, see the last section!&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Last week I started playing with my own toy key-value store (see theprevious &lt;a href=&#34;http://localhost:1313/posts/cledis/&#34;&gt;post&lt;/a&gt;). At the end I got to ahashtable exposed over the network, using a protocol based onS-Expressions. For the next steps, I have two alternatives, I can workon the low level representation of the data, maybe implement B-Trees,and some storage, or I can go up instead, and see how can I make itdistributed, and play with some nice algorithms.&lt;/p&gt;&lt;p&gt;Well, I haven&amp;rsquo;t made my mind yet, but I thought I may want to callsome code from C eventually, so I spent some time trying CFFI, andsince C was a bit boring, I tried Zig!&lt;/p&gt;&lt;p&gt;It turns out it&amp;rsquo;s not that complicated, at least for simple calls. Iwrote a struct with some numbers and a pointer to a null terminatedstring:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zig&#34; data-lang=&#34;zig&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Point &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    label&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;*:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And a constructor and destructor set:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zig&#34; data-lang=&#34;zig&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; makepoint(label&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;*:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, x&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, y&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;callconv(.C) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Point {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.heap.c_allocator.create(Point) &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unreachable&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             p.label &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std.heap.c_allocator.dupeZ(&lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;, std.mem.span(label)) &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unreachable&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             p.x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             p.y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; freepoint(p&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Point)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;callconv(.C) &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             std.heap.c_allocator.free(std.mem.span(p.label));&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             std.heap.c_allocator.destroy(p);&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And to see if I could modify the struct, I wrote a function tomultiply the integers:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zig&#34; data-lang=&#34;zig&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; multpoint(p&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Point, n&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;, result&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;Point)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;callconv(.C) &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             result.x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             result.y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p.y &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; n;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The I just need to compile it into a library:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ zig build-lib -dynamic --library c main.zig&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, back to Common Lisp, make sure CFFI is available, load the library:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cffi:load-foreign-library &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;~/projects/lisp/experiments/libmain.so&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and define the struct and the functions:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cffi:defcstruct point&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (label &lt;span style=&#34;color:#e6db74&#34;&gt;:string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (x &lt;span style=&#34;color:#e6db74&#34;&gt;:int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (y &lt;span style=&#34;color:#e6db74&#34;&gt;:int&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cffi:defcfun &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;makepoint&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:pointer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (label &lt;span style=&#34;color:#e6db74&#34;&gt;:string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (x &lt;span style=&#34;color:#e6db74&#34;&gt;:int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (y &lt;span style=&#34;color:#e6db74&#34;&gt;:int&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cffi:defcfun &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;freepoint&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:void&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (p &lt;span style=&#34;color:#e6db74&#34;&gt;:pointer&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cffi:defcfun &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multpoint&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:void&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (p &lt;span style=&#34;color:#e6db74&#34;&gt;:pointer&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (n &lt;span style=&#34;color:#e6db74&#34;&gt;:int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (result &lt;span style=&#34;color:#e6db74&#34;&gt;:string&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And to see if everything works, let&amp;rsquo;s use them:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun points ()&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((p (makepoint &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my-vector&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (multpoint p &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt; p)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;point: ~a, ~a, ~a&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (cffi:foreign-slot-value p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:struct&lt;/span&gt; point) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;label&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (cffi:foreign-slot-value p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:struct&lt;/span&gt; point) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;x&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (cffi:foreign-slot-value p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;:struct&lt;/span&gt; point) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;y&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (freepoint p)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It appears to work!&lt;/p&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;EXPERIMENTS&amp;gt; (points)point: my-vector, 200, 200; No valuesEXPERIMENTS&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;not-all-is-clear-yet&#34;&gt;Not all is clear yet&lt;/h3&gt;&lt;p&gt;When I was experimenting with the code I realised that if I switchedthe order of the fields, so that the string is the last one:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zig&#34; data-lang=&#34;zig&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Point &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    label&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;*:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(cffi:defcstruct point&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (x &lt;span style=&#34;color:#e6db74&#34;&gt;:int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (y &lt;span style=&#34;color:#e6db74&#34;&gt;:int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (label &lt;span style=&#34;color:#e6db74&#34;&gt;:string&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It does&amp;rsquo;t work! It compiles without issues, but when I try to run thecode I get an error:&lt;/p&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Unhandled memory fault at #xC8000000C8.   [Condition of type SB-SYS:MEMORY-FAULT-ERROR]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I don&amp;rsquo;t know why that could be, I assume it must be some problem withmemory alignment, but in theory the code should have been equivalent&amp;hellip;&lt;/p&gt;&lt;p&gt;If anybody happens to read this and knows the answer, please ping meon Twitter or Bluesky, I would love to know what&amp;rsquo;s going on!&lt;/p&gt;&lt;h4 id=&#34;it-seems-it-is-clear-now&#34;&gt;It seems it is clear now!&lt;/h4&gt;&lt;p&gt;As a group of nice people was kind enough to tell me, Zig reorders thefields in the structs to avoid padding, by default. That means thatthe 64 bit pointer, being longer than the ints, would be positionedfirst, causing the problem.&lt;/p&gt;&lt;p&gt;Marking the struct as extern solves it:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-zig&#34; data-lang=&#34;zig&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; Point &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;  {&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    x&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    label&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f92672&#34;&gt;*:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;u8&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
   
     <item>
       <title>Redis from scratch, or Cledis</title>
       <link>http://localhost:1313/posts/cledis/</link>
       <pubDate>Sun, 02 Mar 2025 12:46:38 +0100</pubDate>
       
       <guid>http://localhost:1313/posts/cledis/</guid>
       <description>&lt;p&gt;This week I was looking for something new, and I realised that I&amp;rsquo;venever tried to do any network programming using Common Lisp. Also,some time ago I came across the &lt;a href=&#34;https://build-your-own.org/redis/#table-of-contents&#34;&gt;Build your ownRedis&lt;/a&gt; book, butnever tried to go through it. The project is perfect, it containsthreading, networking, and even some async programming. I had no ideawhat the Common Lisp ecosystem for those things looks like, so it wastime to find out.&lt;/p&gt;&lt;p&gt;So far I&amp;rsquo;m still up to the first part, building a basic key valuestore. The book is quite detailed, and it&amp;rsquo;s all C++, so a lot of thecomplexity goes away just by using CL. That said, I&amp;rsquo;m trying to stayclose to the spirit of the original code.&lt;/p&gt;&lt;p&gt;I did some research, and I found that there are bindings for libuv(&lt;a href=&#34;https://orthecreedence.github.io/cl-async/&#34;&gt;cl-async&lt;/a&gt;), and it&amp;rsquo;swell documented and easy to use!. I also found&lt;a href=&#34;https://github.com/usocket/usocket&#34;&gt;usocket&lt;/a&gt; for plain sockets, whichI tried to use for the client, but it seems the socket abstractionthey use is not compatible, and I wanted to use the same set ofencoding/decoding functions in both client and server, so I ended upusing cl-async also for the client.&lt;/p&gt;&lt;h4 id=&#34;a-key-value-store&#34;&gt;A Key Value Store&lt;/h4&gt;&lt;p&gt;In this first version I&amp;rsquo;m building a naive key value store, just ahash-map protected by a lock, with two operations, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defvar *store* (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-hash-table&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:test&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;equal&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defvar *lock* (bt:make-lock))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun put-value (key val)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (bt:with-lock-held (*lock*)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (setf (&lt;span style=&#34;color:#a6e22e&#34;&gt;gethash&lt;/span&gt; key *store*) val)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun get-value (key)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (bt:with-lock-held (*lock*)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;gethash&lt;/span&gt; key *store*)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This would obviously create a lot of contention in the store, since itmeans we will serialize all incoming requests, but we can think aboutimproving that later.&lt;/p&gt;&lt;h4 id=&#34;message-encoding&#34;&gt;Message Encoding&lt;/h4&gt;&lt;p&gt;The next step is thinking about how to serialize the operations, so thatclients can tell the server what they need.&lt;/p&gt;&lt;p&gt;The encoding the book uses allows chaining several operations in thesame message. The first four bytes of the result buffer encode thetotal length of the message, and then appends operations (get or set),following the same pattern: a size, and the bytes representing ASCIIfor each operation:&lt;/p&gt;&lt;p&gt;[ Total Size / Op1 Size / Op1 Bytes / Op2 Size / Op2 Bytes ]&lt;/p&gt;&lt;p&gt;This approach allows the server to execute the operations as they areparsed (Op1 arrives, execute on a thread, and go back to reading). Thealternative would be to wait for all the input to arrive, then parseit all, and then execute the full set.&lt;/p&gt;&lt;p&gt;On my first attempt I was more worried about the details of thecommunication than optimising the protocol, so I chose to takeadvantage of S-Expressions to handle the parsing for me. This meansthat I send them all in one batch:&lt;/p&gt;&lt;p&gt;[ Total Size / Ops List ]&lt;/p&gt;&lt;p&gt;The chain of operations is represented by a list of symbols:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; one &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; one) (&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; one &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I can read a string containing those values with &lt;code&gt;read-from-string&lt;/code&gt;and get S-Expressions with my operations, and I can transform theminto a string again using &lt;code&gt;princ-to-string&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun naive-encode-msg (ops)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Encode a list of operations into bytes. The input looks like this: &amp;#39;((set one 1) (get two))&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((vec (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-array&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; ops) &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;:element-type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned-byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;:fill-pointer&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:adjustable&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (str (&lt;span style=&#34;color:#a6e22e&#34;&gt;princ-to-string&lt;/span&gt; ops))) &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (push-str vec str)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-array&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; vec) &lt;span style=&#34;color:#e6db74&#34;&gt;:element-type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned-byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (dotimes (i (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; vec) buffer)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (setf (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; buffer i) (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; vec i))))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun naive-decode-msg (buffer &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Encode a list of operations into bytes. The input looks like this: &amp;#39;((set one 1) (get two))&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((len (rec-int buffer &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (str (rec-payload buffer &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt; len)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;read-from-string&lt;/span&gt; str)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then I just need functions to serialize numbers and strings:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun push-num (vec n)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((bytes (uint32-to-be-bytes n)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (dotimes (i (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;vector-push-extend&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; bytes i) vec (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; vec))))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun push-str (vec str)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((bytes (str-coerce-bytes str)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (push-num vec (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (dotimes (i (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;vector-push-extend&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; bytes i) vec (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; vec))))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And when I get the list of operations, I can execute them all:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun run-ops (ops)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (dolist (op ops)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (case (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; op)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; (key-value:put-value (&lt;span style=&#34;color:#a6e22e&#34;&gt;cadr&lt;/span&gt; op) (&lt;span style=&#34;color:#a6e22e&#34;&gt;caddr&lt;/span&gt; op)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value = ~a~%&amp;#34;&lt;/span&gt; (key-value:get-value (&lt;span style=&#34;color:#a6e22e&#34;&gt;cadr&lt;/span&gt; op)))))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;the-server-and-client&#34;&gt;The Server and Client&lt;/h4&gt;&lt;p&gt;Now we just need to make these functions accessible through theprotocol. We create a TCP server listening on our port of choice,enabling streaming, so that we can consume the socket on demand. Upstarting the server just waits for requests, parses the input and runsthe operations.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun server (port)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setf *server* &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (cl-async:tcp-server &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; port&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             (lambda (socket &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SERVER] Ready to read~%&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-array&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:element-type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned-byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      (ops (naive-decode-msg buffer &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SERVER] This is the message: ~a~%&amp;#34;&lt;/span&gt; ops)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 (run-ops ops))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (send-msg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done!&amp;#34;&lt;/span&gt; socket)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SERVER] That was it.~%&amp;#34;&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             &lt;span style=&#34;color:#e6db74&#34;&gt;:event-cb&lt;/span&gt; (lambda (err) (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SERVER] Event: ~a~%&amp;#34;&lt;/span&gt; err))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             &lt;span style=&#34;color:#e6db74&#34;&gt;:stream&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (cl-async:signal-handler &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (lambda (sig)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;ignore&lt;/span&gt; sig))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (cl-async:exit-event-loop))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the client will just connect, send a few operations, and wait fora response, the close itself:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun client (port)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (as:tcp-connect &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt; port&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (lambda (socket &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-array&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:element-type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned-byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[CLIENT] Respose: ~a~%&amp;#34;&lt;/span&gt; (rec-msg buffer &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (as:exit-event-loop)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:event-cb&lt;/span&gt; (lambda (event) (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[CLIENT] Event received: ~a~%&amp;#34;&lt;/span&gt; event))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:stream&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:data&lt;/span&gt; (naive-encode-msg &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((SET one &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (GET one)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:read-timeout&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now to test the whole thing:&lt;/p&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CLEDIS&amp;gt; (launch-async-server 12342)#&amp;lt;SB-THREAD:THREAD &amp;#34;Server&amp;#34; RUNNING {1004CB3243}&amp;gt;CLEDIS&amp;gt; (launch-client 12342)#&amp;lt;SB-THREAD:THREAD &amp;#34;Client&amp;#34; RUNNING {1004CB70C3}&amp;gt;[SERVER] Ready to read[SERVER] This is the message: ((SET ONE 1) (GET ONE))Value = 1[SERVER] That was it.[CLIENT] Respose: Done![SERVER] Event: #&amp;lt;SOCKET-EOF #&amp;lt;TCP-SOCKET {10054C8093}&amp;gt;: 0: NIL {1001E5CD63}&amp;gt;CLEDIS&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;rsquo;m keeping the code in &lt;a href=&#34;https://github.com/jagg/cledis/tree/master&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;h4 id=&#34;next-steps&#34;&gt;Next steps&lt;/h4&gt;&lt;p&gt;At this stage this is barely a toy, the protocol can be optimised, weshould probably use some sort of thread-pool to execute theoperations, and I&amp;rsquo;m sure there are better ways to do theserialization, but this is not too bad for a few hours tinkering.&lt;/p&gt;&lt;p&gt;Writing the code was actually quite nice, the libraries have gooddocumentation, but I need to investigate a bit more about whatcl-async actually does under the hood, I&amp;rsquo;m not convinced the code Iwrote is completely right.&lt;/p&gt;&lt;p&gt;I will follow up with the next steps of the book, and at the end Iwill try some profiling, the CL Cookbook has a section about it, so Iwould like to try it myself!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Base64 Encoding &amp; Decoding</title>
       <link>http://localhost:1313/posts/base64/</link>
       <pubDate>Sat, 22 Feb 2025 18:23:44 +0100</pubDate>
       
       <guid>http://localhost:1313/posts/base64/</guid>
       <description>&lt;p&gt;Looking for a first project to play with, I remembered&lt;a href=&#34;https://cryptopals.com&#34;&gt;CryptoPals&lt;/a&gt;. I did some of it several yearsago, and it was fun, so I thought it could be a good way to getfamiliar with Common Lisp, at least the first set. With that in mind,I had a look, and hear we are!&lt;/p&gt;&lt;p&gt;The very first challenge is about hex and base64 encoding. The firsttime around I just used available libraries for both (I used Rust atthe time), but the point of this was to open some black boxes, so Idecided to implement everything from scratch!&lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve used Base64 encoding several times in the past, both in mypersonal projects, and during my day job, and while I understoodconceptually what it was, I had never tried to implement itmyself. After a quick search I found a very nice description of thealgorithm at&lt;a href=&#34;https://b64encode.com/blog/base64-algorithm/&#34;&gt;b64encode.com&lt;/a&gt;, Iopened Emacs, and got to work.&lt;/p&gt;&lt;p&gt;The algorithm is very well explained in the link above, so I will nottry to do it again, but this is what I came up with for the encoding part:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun get-n-bits (n &lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get n bits from byte, starting at pos&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (when &lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;ldb&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt; n pos) &lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun combine-3 (bytes start end)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Combine an array of three bytes into a single integer&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((seq (&lt;span style=&#34;color:#a6e22e&#34;&gt;subseq&lt;/span&gt; bytes start (&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes) end))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (when seq &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (&lt;span style=&#34;color:#a6e22e&#34;&gt;logior&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ash&lt;/span&gt; (try-aref seq &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               (&lt;span style=&#34;color:#a6e22e&#34;&gt;ash&lt;/span&gt; (try-aref seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               (&lt;span style=&#34;color:#a6e22e&#34;&gt;ash&lt;/span&gt; (try-aref seq &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes) end) start)))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun bytes-to-b64 (bytes)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Base64 Encode an array of bytes into a string&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (with-output-to-string (str)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (do* ((start &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; start &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (end &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; end &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;=&lt;/span&gt; start (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes)) str)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (multiple-value-bind (combined byte-count) (combine-3 bytes start end)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (dotimes (n byte-count)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#a6e22e&#34;&gt;princ&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt; *b64-lookup* (get-n-bits &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; combined (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)))) str))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (dotimes (n (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; byte-count))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#a6e22e&#34;&gt;princ&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;#\=&lt;/span&gt; str))))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It was much shorter than I thought it would be, so I was quitepleased! I was suprised with how handy the &lt;code&gt;ldb&lt;/code&gt; function was, and howintuitive was to write to a string as a stream.&lt;/p&gt;&lt;p&gt;You can find the full source &lt;a href=&#34;https://github.com/jagg/crypto-pals/blob/master/src/encodings.lisp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;After writing the code I went around to see how other peopleimplemented this, and I found&lt;a href=&#34;https://github.com/massung/base64/blob/master/base64.lisp&#34;&gt;this&lt;/a&gt;,written 10 years ago. It&amp;rsquo;s a lot nicer than my version, and I love howthey also used the input string as a stream, calling &lt;code&gt;read-char&lt;/code&gt;, thatsimplifies things. I&amp;rsquo;m still not sold on the &lt;code&gt;loop&lt;/code&gt; macro. Seems easyto read, but I find it a bit too magical, and unintuitive towrite. But I guess that&amp;rsquo;s because I&amp;rsquo;m not familiar with it. I&amp;rsquo;ll haveto try to use it in the future!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Back to basics</title>
       <link>http://localhost:1313/posts/back-to-basics/</link>
       <pubDate>Sat, 22 Feb 2025 09:50:03 +0100</pubDate>
       
       <guid>http://localhost:1313/posts/back-to-basics/</guid>
       <description>&lt;p&gt;During the past few years my work as a software engineer has involvedless low level, algorithmic coding, and more high level strategy,architecture, dependency and team interactions. While that makes senseas careen progresion (I have more impact that way), the truth is thatI miss coding things from scratch.&lt;/p&gt;&lt;p&gt;Also, with the coming of our AI overlords, I keep on hearing thatthese skills, that I&amp;rsquo;ve spent years improving, are going to, if notdisappear, become less relevant. In the not so far future, we will beable to pay a fee to one of the remaining AI providers, and ask anagent to generate our app, and set up a new business from scratch. Inthat world nobody will need to look at code anymore!&lt;/p&gt;&lt;p&gt;Well, maybe that&amp;rsquo;s true, or maybe that will never happen. Either way,I will still enjoy writing software, learning, and experimenting, soI&amp;rsquo;ve decided to go back to basics, pick up a language I&amp;rsquo;m not familiarwith (common lisp!), and just play around, experiment, open some blackboxes and re-invent some wheels!&lt;/p&gt;&lt;p&gt;As a way to force me to digest my thoughts, and keep momentum, I&amp;rsquo;vealso decided to start this blog. Who knows, it may be interesting tolook back after a few months and see what I&amp;rsquo;ve been doing!&lt;/p&gt;&lt;p&gt;So this is it. The first entry. It will not be very polished, probablywill contain more than a few mistakes, but that&amp;rsquo;s the point! I&amp;rsquo;ll belearning and hopefully having fun along the way.&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
