
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Common Lisp on Logos, Thumos &amp; Code</title>
   <link>https://example.org/categories/common-lisp/</link>
   <description>Recent content in Common Lisp on Logos, Thumos &amp; Code</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <copyright>Copyright &amp;copy; 2025 - Jose A. Garcia</copyright>
   <lastBuildDate>Sat, 22 Feb 2025 18:23:44 +0100</lastBuildDate>
   
       <atom:link href="https://example.org/categories/common-lisp/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Base64 Encoding &amp; Decoding</title>
       <link>https://example.org/posts/base64/</link>
       <pubDate>Sat, 22 Feb 2025 18:23:44 +0100</pubDate>
       
       <guid>https://example.org/posts/base64/</guid>
       <description>&lt;p&gt;Looking for a first project to play with, I remembered&lt;a href=&#34;https://cryptopals.com&#34;&gt;CryptoPals&lt;/a&gt;. I did some of it several yearsago, and it was fun, so I thought it could be a good way to getfamiliar with Common Lisp, at least the first set. With that in mind,I had a look, and hear we are!&lt;/p&gt;&lt;p&gt;The very first challenge is about hex and base64 encoding. The firsttime around I just used available libraries for both (I used Rust atthe time), but the point of this was to open some black boxes, so Idecided to implement everything from scratch!&lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve used Base64 encoding several times in the past, both in mypersonal projects, and during my day job, and while I understoodconceptually what it was, I had never tried to implement itmyself. After a quick search I found a very nice description of thealgorithm at&lt;a href=&#34;https://b64encode.com/blog/base64-algorithm/&#34;&gt;b64encode.com&lt;/a&gt;, Iopened Emacs, and got to work.&lt;/p&gt;&lt;p&gt;The algorithm is very well explained in the link above, so I will nottry to do it again, but this is what I came up with for the encoding part:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun get-n-bits (n &lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get n bits from byte, starting at pos&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (when &lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;ldb&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt; n pos) &lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun combine-3 (bytes start end)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Combine an array of three bytes into a single integer&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((seq (&lt;span style=&#34;color:#a6e22e&#34;&gt;subseq&lt;/span&gt; bytes start (&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes) end))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (when seq &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (&lt;span style=&#34;color:#a6e22e&#34;&gt;logior&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ash&lt;/span&gt; (try-aref seq &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               (&lt;span style=&#34;color:#a6e22e&#34;&gt;ash&lt;/span&gt; (try-aref seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               (&lt;span style=&#34;color:#a6e22e&#34;&gt;ash&lt;/span&gt; (try-aref seq &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes) end) start)))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun bytes-to-b64 (bytes)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Base64 Encode an array of bytes into a string&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (with-output-to-string (str)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (do* ((start &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; start &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (end &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; end &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;=&lt;/span&gt; start (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes)) str)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (multiple-value-bind (combined byte-count) (combine-3 bytes start end)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (dotimes (n byte-count)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#a6e22e&#34;&gt;princ&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt; *b64-lookup* (get-n-bits &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; combined (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)))) str))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (dotimes (n (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; byte-count))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#a6e22e&#34;&gt;princ&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;#\=&lt;/span&gt; str))))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It was much shorter than I thought it would be, so I was quitepleased! I was suprised with how handy the &lt;code&gt;ldb&lt;/code&gt; function was, and howintuitive was to write to a string as a stream.&lt;/p&gt;&lt;p&gt;You can find the full source &lt;a href=&#34;https://github.com/jagg/crypto-pals/blob/master/src/encodings.lisp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;After writing the code I went around to see how other peopleimplemented this, and I found&lt;a href=&#34;https://github.com/massung/base64/blob/master/base64.lisp&#34;&gt;this&lt;/a&gt;,written 10 years ago. It&amp;rsquo;s a lot nicer than my version, and I love howthey also used the input string as a stream, calling &lt;code&gt;read-char&lt;/code&gt;, thatsimplifies things. I&amp;rsquo;m still not sold on the &lt;code&gt;loop&lt;/code&gt; macro. Seems easyto read, but I find it a bit too magical, and unintuitive towrite. But I guess that&amp;rsquo;s because I&amp;rsquo;m not familiar with it. I&amp;rsquo;ll haveto try to use it in the future!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Back to basics</title>
       <link>https://example.org/posts/back-to-basics/</link>
       <pubDate>Sat, 22 Feb 2025 09:50:03 +0100</pubDate>
       
       <guid>https://example.org/posts/back-to-basics/</guid>
       <description>&lt;p&gt;During the past few years my work as a software engineer has involvedless low level, algorithmic coding, and more high level strategy,architecture, dependency and team interactions. While that makes senseas careen progresion (I have more impact that way), the truth is thatI miss coding things from scratch.&lt;/p&gt;&lt;p&gt;Also, with the coming of our AI overlords, I keep on hearing thatthese skills, that I&amp;rsquo;ve spent years improving, are going to, if notdisappear, become less relevant. In the not so far future, we will beable to pay a fee to one of the remaining AI providers, and ask anagent to generate our app, and set up a new business from scratch. Inthat world nobody will need to look at code anymore!&lt;/p&gt;&lt;p&gt;Well, maybe that&amp;rsquo;s true, or maybe that will never happen. Either way,I will still enjoy writing software, learning, and experimenting, soI&amp;rsquo;ve decided to go back to basics, pick up a language I&amp;rsquo;m not familiarwith (common lisp!), and just play around, experiment, open some blackboxes and re-invent some wheels!&lt;/p&gt;&lt;p&gt;As a way to force me to digest my thoughts, and keep momentum, I&amp;rsquo;vealso decided to start this blog. Who knows, it may be interesting tolook back after a few months and see what I&amp;rsquo;ve been doing!&lt;/p&gt;&lt;p&gt;So this is it. The first entry. It will not be very polished, probablywill contain more than a few mistakes, but that&amp;rsquo;s the point! I&amp;rsquo;ll belearning and hopefully having fun along the way.&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
