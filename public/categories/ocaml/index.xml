<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OCaml on Logos, Thumos &amp; Code</title>
    <link>http://localhost:1313/categories/ocaml/</link>
    <description>Recent content in OCaml on Logos, Thumos &amp; Code</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; 2025 - Jose A. Garcia</copyright>
    <lastBuildDate>Mon, 26 May 2025 18:53:21 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/ocaml/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leader election using Raft</title>
      <link>http://localhost:1313/posts/leader_election/</link>
      <pubDate>Mon, 26 May 2025 18:53:21 +0200</pubDate>
      <guid>http://localhost:1313/posts/leader_election/</guid>
      <description>&lt;p&gt;In my previous posts I&amp;rsquo;ve been working on a basic key-value store,&#xA;using a write-ahead log, and replicating its data across several&#xA;replicas (see posts on &lt;a href=&#34;http://localhost:1313/posts/wal/&#34;&gt;WAL&lt;/a&gt;, and &lt;a href=&#34;http://localhost:1313/posts/replication/&#34;&gt;replication&lt;/a&gt;)). This version had a hardcoded leader handling&#xA;all writes, and sending the data to the followers, but had several&#xA;shortcomings, the main one among them was that the configuration had&#xA;to include which node is the leader. If the leader dies, the cluster&#xA;can&amp;rsquo;t do any work, doesn&amp;rsquo;t matter how many nodes remain.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adding replication to the Key-Value Store</title>
      <link>http://localhost:1313/posts/replication/</link>
      <pubDate>Fri, 18 Apr 2025 19:43:07 +0200</pubDate>
      <guid>http://localhost:1313/posts/replication/</guid>
      <description>&lt;p&gt;During the past few weeks I&amp;rsquo;ve built a basic key-value store that&#xA;persists data to disk. It works, but only as a single node, so there&#xA;is a fixed limit on the amount of data it can store, and the througput&#xA;it can sustain.&lt;/p&gt;&#xA;&lt;p&gt;We can make the store scale horizontally in two ways:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Replication&lt;/strong&gt;, which keeps additional copies of the data in other nodes, improving&#xA;throughput.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Sharding&lt;/strong&gt;, which partitions the keys across different nodes, so that we can store more data.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In this post I&amp;rsquo;m going to tackle the first one, replication,&#xA;refactoring the storage layer so that we can have as many replicas as&#xA;we want serving reads. All the code is available in&#xA;&lt;a href=&#34;https://github.com/jagg/ocledis&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes on Eio</title>
      <link>http://localhost:1313/posts/eio/</link>
      <pubDate>Sat, 05 Apr 2025 10:01:15 +0200</pubDate>
      <guid>http://localhost:1313/posts/eio/</guid>
      <description>&lt;p&gt;This weekend I took a step back from working on my Key-Value store to&#xA;make sure I understand the concurrency model of Eio, the OCaml 5&#xA;library that I&amp;rsquo;m using for concurrency and parallelism.&lt;/p&gt;&#xA;&lt;p&gt;I decided to turn my notes into a post to force myself to address any&#xA;gaps in my understanding. I&amp;rsquo;m sure that there are several errors, or&#xA;things to improve, so if you are reading this and find some, please,&#xA;ping me on &lt;a href=&#34;https://x.com/jagarciagim&#34;&gt;Twitter&lt;/a&gt;!&lt;/p&gt;</description>
    </item>
    <item>
      <title>A basic Write Ahead Log</title>
      <link>http://localhost:1313/posts/wal/</link>
      <pubDate>Sun, 30 Mar 2025 12:05:49 +0200</pubDate>
      <guid>http://localhost:1313/posts/wal/</guid>
      <description>&lt;p&gt;This weekend I decided to add some basic persistence to my &lt;a href=&#34;https://github.com/jagg/ocledis&#34;&gt;Key-Value&#xA;store&lt;/a&gt;. I considered going directly&#xA;into B-Trees or LSM, but they are quite involved. Moving, forward I&#xA;want to focus more on the distributed side of the store rather than low&#xA;level storage details (saving those for later!), so for now I decided&#xA;to implement something simpler, a basic Write Ahead Log (WAL, for short).&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-write-ahead-log&#34;&gt;What is a Write Ahead Log?&lt;/h2&gt;&#xA;&lt;p&gt;This&#xA;&lt;a href=&#34;https://www.architecture-weekly.com/p/the-write-ahead-log-a-foundation&#34;&gt;post&lt;/a&gt;&#xA;from Oskar Dudycz does a much better job than I could explaining the&#xA;theory, so I will just give the high level summary.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Giving OCaml a try</title>
      <link>http://localhost:1313/posts/trying_ocaml/</link>
      <pubDate>Sat, 22 Mar 2025 20:31:47 +0100</pubDate>
      <guid>http://localhost:1313/posts/trying_ocaml/</guid>
      <description>&lt;p&gt;During the last couple of weeks I&amp;rsquo;ve gone on a completely different&#xA;direction. I happened to hear a few people saying good things about OCaml,&#xA;and I was kind of missing coding with strong types, so I decided to&#xA;reimplement my basic key value store (see the &lt;a href=&#34;http://localhost:1313/posts/cledis/&#34;&gt;post&lt;/a&gt;),&#xA;and see if it was fun to write.&lt;/p&gt;&#xA;&lt;p&gt;First of all, here is the&#xA;&lt;a href=&#34;https://github.com/jagg/ocledis&#34;&gt;result&lt;/a&gt;. The functionality is the&#xA;same, a hash map over a network, using an &amp;ldquo;official&amp;rdquo; async library,&#xA;and a basic client and server that receive and send S-Expressions over&#xA;the wire.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
