
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Tags on Logos, Thumos &amp; Code</title>
   <link>http://localhost:1313/tags/</link>
   <description>Recent content in Tags on Logos, Thumos &amp; Code</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <copyright>Copyright &amp;copy; 2025 - Jose A. Garcia</copyright>
   <lastBuildDate>Sun, 02 Mar 2025 12:46:38 +0100</lastBuildDate>
   
       <atom:link href="http://localhost:1313/tags/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Redis from scratch, or Cledis</title>
       <link>http://localhost:1313/posts/cledis/</link>
       <pubDate>Sun, 02 Mar 2025 12:46:38 +0100</pubDate>
       
       <guid>http://localhost:1313/posts/cledis/</guid>
       <description>&lt;p&gt;This week I was looking for something new, and I realised that I&amp;rsquo;venever tried to do any network programming using Common Lisp. Also,some time ago I came across the &lt;a href=&#34;https://build-your-own.org/redis/#table-of-contents&#34;&gt;Build your ownRedis&lt;/a&gt; book, butnever tried to go through it. The project is perfect, it containsthreading, networking, and even some async programming. I had no ideawhat the Common Lisp ecosystem for those things looks like, so it wastime to find out.&lt;/p&gt;&lt;p&gt;So far I&amp;rsquo;m still up to the first part, building a basic key valuestore. The book is quite detailed, and it&amp;rsquo;s all C++, so a lot of thecomplexity goes away just by using CL. That said, I&amp;rsquo;m trying to stayclose to the spirit of the original code.&lt;/p&gt;&lt;p&gt;I did some research, and I found that there are bindings for libuv(&lt;a href=&#34;https://orthecreedence.github.io/cl-async/&#34;&gt;cl-async&lt;/a&gt;), and it&amp;rsquo;swell documented and easy to use!. I also found&lt;a href=&#34;https://github.com/usocket/usocket&#34;&gt;usocket&lt;/a&gt; for plain sockets, whichI tried to use for the client, but it seems the socket abstractionthey use is not compatible, and I wanted to use the same set ofencoding/decoding functions in both client and server, so I ended upusing cl-async also for the client.&lt;/p&gt;&lt;h4 id=&#34;a-key-value-store&#34;&gt;A Key Value Store&lt;/h4&gt;&lt;p&gt;In this first version I&amp;rsquo;m building a naive key value store, just ahash-map protected by a lock, with two operations, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defvar *store* (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-hash-table&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:test&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;equal&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defvar *lock* (bt:make-lock))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun put-value (key val)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (bt:with-lock-held (*lock*)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (setf (&lt;span style=&#34;color:#a6e22e&#34;&gt;gethash&lt;/span&gt; key *store*) val)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun get-value (key)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (bt:with-lock-held (*lock*)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;gethash&lt;/span&gt; key *store*)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This would obviously create a lot of contention in the store, since itmeans we will serialize all incoming requests, but we can think aboutimproving that later.&lt;/p&gt;&lt;h4 id=&#34;message-encoding&#34;&gt;Message Encoding&lt;/h4&gt;&lt;p&gt;The next step is thinking about how to serialize the operations, so thatclients can tell the server what they need.&lt;/p&gt;&lt;p&gt;The encoding the book uses allows chaining several operations in thesame message. The first four bytes of the result buffer encode thetotal length of the message, and then appends operations (get or set),following the same pattern: a size, and the bytes representing ASCIIfor each operation:&lt;/p&gt;&lt;p&gt;[ Total Size / Op1 Size / Op1 Bytes / Op2 Size / Op2 Bytes ]&lt;/p&gt;&lt;p&gt;This approach allows the server to execute the operations as they areparsed (Op1 arrives, execute on a thread, and go back to reading). Thealternative would be to wait for all the input to arrive, then parseit all, and then execute the full set.&lt;/p&gt;&lt;p&gt;On my first attempt I was more worried about the details of thecommunication than optimising the protocol, so I chose to takeadvantage of S-Expressions to handle the parsing for me. This meansthat I send them all in one batch:&lt;/p&gt;&lt;p&gt;[ Total Size / Ops List ]&lt;/p&gt;&lt;p&gt;The chain of operations is represented by a property list:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; one &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; one) (&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; one &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I can read a string containing those values with &lt;code&gt;read-from-string&lt;/code&gt;and get S-Expressions with my operations, and I can transform theminto a string again using &lt;code&gt;princ-to-string&lt;/code&gt;.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun naive-encode-msg (ops)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Encode a list of operations into bytes. The input looks like this: &amp;#39;((set one 1) (get two))&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((vec (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-array&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; ops) &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;:element-type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned-byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;:fill-pointer&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:adjustable&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (str (&lt;span style=&#34;color:#a6e22e&#34;&gt;princ-to-string&lt;/span&gt; ops))) &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (push-str vec str)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-array&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; vec) &lt;span style=&#34;color:#e6db74&#34;&gt;:element-type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned-byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (dotimes (i (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; vec) buffer)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (setf (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; buffer i) (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; vec i))))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun naive-decode-msg (buffer &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Encode a list of operations into bytes. The input looks like this: &amp;#39;((set one 1) (get two))&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((len (rec-int buffer &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (str (rec-payload buffer &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt; len)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;read-from-string&lt;/span&gt; str)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then I just need functions to serialize numbers and strings:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun push-num (vec n)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((bytes (uint32-to-be-bytes n)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (dotimes (i (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;vector-push-extend&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; bytes i) vec (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; vec))))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun push-str (vec str)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((bytes (str-coerce-bytes str)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (push-num vec (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (dotimes (i (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;vector-push-extend&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;aref&lt;/span&gt; bytes i) vec (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; vec))))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And when I get the list of operations, I can execute them all:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun run-ops (ops)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (dolist (op ops)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (case (&lt;span style=&#34;color:#a6e22e&#34;&gt;car&lt;/span&gt; op)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; (key-value:put-value (&lt;span style=&#34;color:#a6e22e&#34;&gt;cadr&lt;/span&gt; op) (&lt;span style=&#34;color:#a6e22e&#34;&gt;caddr&lt;/span&gt; op)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Value = ~a~%&amp;#34;&lt;/span&gt; (key-value:get-value (&lt;span style=&#34;color:#a6e22e&#34;&gt;cadr&lt;/span&gt; op)))))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;the-server-and-client&#34;&gt;The Server and Client&lt;/h4&gt;&lt;p&gt;Now we just need to make these functions accessible through theprotocol. We create a TCP server listening on our port of choice,enabling streaming, so that we can consume the socket on demand. Upstarting the server just waits for requests, parses the input and runsthe operations.&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun server (port)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (setf *server* &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (cl-async:tcp-server &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; port&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             (lambda (socket &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SERVER] Ready to read~%&amp;#34;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (&lt;span style=&#34;color:#66d9ef&#34;&gt;let*&lt;/span&gt; ((buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-array&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:element-type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned-byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                      (ops (naive-decode-msg buffer &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SERVER] This is the message: ~a~%&amp;#34;&lt;/span&gt; ops)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 (run-ops ops))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (send-msg &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done!&amp;#34;&lt;/span&gt; socket)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SERVER] That was it.~%&amp;#34;&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             &lt;span style=&#34;color:#e6db74&#34;&gt;:event-cb&lt;/span&gt; (lambda (err) (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[SERVER] Event: ~a~%&amp;#34;&lt;/span&gt; err))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                             &lt;span style=&#34;color:#e6db74&#34;&gt;:stream&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (cl-async:signal-handler &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; (lambda (sig)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (&lt;span style=&#34;color:#66d9ef&#34;&gt;declare&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;ignore&lt;/span&gt; sig))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               (cl-async:exit-event-loop))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the client will just connect, send a few operations, and wait fora response, the close itself:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun client (port)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (as:tcp-connect &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt; port&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (lambda (socket &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((buffer (&lt;span style=&#34;color:#a6e22e&#34;&gt;make-array&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;:element-type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned-byte&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[CLIENT] Respose: ~a~%&amp;#34;&lt;/span&gt; (rec-msg buffer &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           (as:exit-event-loop)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:event-cb&lt;/span&gt; (lambda (event) (&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[CLIENT] Event received: ~a~%&amp;#34;&lt;/span&gt; event))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:stream&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:data&lt;/span&gt; (naive-encode-msg &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#39;&lt;/span&gt;((SET one &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) (GET one)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;:read-timeout&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;next-steps&#34;&gt;Next steps&lt;/h4&gt;&lt;p&gt;At this stage this is barely a toy, the protocol can be optimised, weshould probably use some sort of thread-pool to execute theoperations, and I&amp;rsquo;m sure there are better ways to do theserialization, but this is not too bad for a few hours tinkering.&lt;/p&gt;&lt;p&gt;Writing the code was actually quite nice, the libraries have gooddocumentation, but I need to investigate a bit more about whatcl-async actually does under the hood, I&amp;rsquo;m not convinced the code Iwrote is completely right.&lt;/p&gt;&lt;p&gt;I will follow up with the next steps of the book, and at the end Iwill try some profiling, the CL Cookbook has a section about it, so Iwould like to try it myself!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Base64 Encoding &amp; Decoding</title>
       <link>http://localhost:1313/posts/base64/</link>
       <pubDate>Sat, 22 Feb 2025 18:23:44 +0100</pubDate>
       
       <guid>http://localhost:1313/posts/base64/</guid>
       <description>&lt;p&gt;Looking for a first project to play with, I remembered&lt;a href=&#34;https://cryptopals.com&#34;&gt;CryptoPals&lt;/a&gt;. I did some of it several yearsago, and it was fun, so I thought it could be a good way to getfamiliar with Common Lisp, at least the first set. With that in mind,I had a look, and hear we are!&lt;/p&gt;&lt;p&gt;The very first challenge is about hex and base64 encoding. The firsttime around I just used available libraries for both (I used Rust atthe time), but the point of this was to open some black boxes, so Idecided to implement everything from scratch!&lt;/p&gt;&lt;p&gt;I&amp;rsquo;ve used Base64 encoding several times in the past, both in mypersonal projects, and during my day job, and while I understoodconceptually what it was, I had never tried to implement itmyself. After a quick search I found a very nice description of thealgorithm at&lt;a href=&#34;https://b64encode.com/blog/base64-algorithm/&#34;&gt;b64encode.com&lt;/a&gt;, Iopened Emacs, and got to work.&lt;/p&gt;&lt;p&gt;The algorithm is very well explained in the link above, so I will nottry to do it again, but this is what I came up with for the encoding part:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun get-n-bits (n &lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt; pos)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Get n bits from byte, starting at pos&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (when &lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;ldb&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt; n pos) &lt;span style=&#34;color:#a6e22e&#34;&gt;byte&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun combine-3 (bytes start end)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Combine an array of three bytes into a single integer&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; ((seq (&lt;span style=&#34;color:#a6e22e&#34;&gt;subseq&lt;/span&gt; bytes start (&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes) end))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (when seq &lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       (&lt;span style=&#34;color:#a6e22e&#34;&gt;logior&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;ash&lt;/span&gt; (try-aref seq &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               (&lt;span style=&#34;color:#a6e22e&#34;&gt;ash&lt;/span&gt; (try-aref seq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               (&lt;span style=&#34;color:#a6e22e&#34;&gt;ash&lt;/span&gt; (try-aref seq &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes) end) start)))))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(defun bytes-to-b64 (bytes)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Base64 Encode an array of bytes into a string&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (with-output-to-string (str)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (do* ((start &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; start &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (end &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;+&lt;/span&gt; end &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         ((&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;gt;=&lt;/span&gt; start (&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; bytes)) str)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (multiple-value-bind (combined byte-count) (combine-3 bytes start end)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (dotimes (n byte-count)&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#a6e22e&#34;&gt;princ&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;char&lt;/span&gt; *b64-lookup* (get-n-bits &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; combined (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;*&lt;/span&gt; n &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;)))) str))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (dotimes (n (&lt;span style=&#34;color:#a6e22e&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; byte-count))&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          (&lt;span style=&#34;color:#a6e22e&#34;&gt;princ&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;#\=&lt;/span&gt; str))))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It was much shorter than I thought it would be, so I was quitepleased! I was suprised with how handy the &lt;code&gt;ldb&lt;/code&gt; function was, and howintuitive was to write to a string as a stream.&lt;/p&gt;&lt;p&gt;You can find the full source &lt;a href=&#34;https://github.com/jagg/crypto-pals/blob/master/src/encodings.lisp&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;After writing the code I went around to see how other peopleimplemented this, and I found&lt;a href=&#34;https://github.com/massung/base64/blob/master/base64.lisp&#34;&gt;this&lt;/a&gt;,written 10 years ago. It&amp;rsquo;s a lot nicer than my version, and I love howthey also used the input string as a stream, calling &lt;code&gt;read-char&lt;/code&gt;, thatsimplifies things. I&amp;rsquo;m still not sold on the &lt;code&gt;loop&lt;/code&gt; macro. Seems easyto read, but I find it a bit too magical, and unintuitive towrite. But I guess that&amp;rsquo;s because I&amp;rsquo;m not familiar with it. I&amp;rsquo;ll haveto try to use it in the future!&lt;/p&gt;</description>
     </item>
   
     <item>
       <title>Back to basics</title>
       <link>http://localhost:1313/posts/back-to-basics/</link>
       <pubDate>Sat, 22 Feb 2025 09:50:03 +0100</pubDate>
       
       <guid>http://localhost:1313/posts/back-to-basics/</guid>
       <description>&lt;p&gt;During the past few years my work as a software engineer has involvedless low level, algorithmic coding, and more high level strategy,architecture, dependency and team interactions. While that makes senseas careen progresion (I have more impact that way), the truth is thatI miss coding things from scratch.&lt;/p&gt;&lt;p&gt;Also, with the coming of our AI overlords, I keep on hearing thatthese skills, that I&amp;rsquo;ve spent years improving, are going to, if notdisappear, become less relevant. In the not so far future, we will beable to pay a fee to one of the remaining AI providers, and ask anagent to generate our app, and set up a new business from scratch. Inthat world nobody will need to look at code anymore!&lt;/p&gt;&lt;p&gt;Well, maybe that&amp;rsquo;s true, or maybe that will never happen. Either way,I will still enjoy writing software, learning, and experimenting, soI&amp;rsquo;ve decided to go back to basics, pick up a language I&amp;rsquo;m not familiarwith (common lisp!), and just play around, experiment, open some blackboxes and re-invent some wheels!&lt;/p&gt;&lt;p&gt;As a way to force me to digest my thoughts, and keep momentum, I&amp;rsquo;vealso decided to start this blog. Who knows, it may be interesting tolook back after a few months and see what I&amp;rsquo;ve been doing!&lt;/p&gt;&lt;p&gt;So this is it. The first entry. It will not be very polished, probablywill contain more than a few mistakes, but that&amp;rsquo;s the point! I&amp;rsquo;ll belearning and hopefully having fun along the way.&lt;/p&gt;</description>
     </item>
   
 </channel>
</rss>
